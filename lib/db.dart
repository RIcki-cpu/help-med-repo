import 'package:firebase_auth/firebase_auth.dart';
import 'package:help_med/model/models.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class DataRepository {
  String userid;
  late CollectionReference collection;

  DataRepository({required this.userid}) {
    collection = FirebaseFirestore.instance
        .collection('users')
        .doc(userid)
        .collection('profiles');
  }

  //Read all the Profiles
  Stream<QuerySnapshot> getStream() {
    return collection.snapshots();
  }

  //Read a single Profile with a given ID
  Future<DocumentSnapshot> getProfile(String profileID) {
    return collection.doc(profileID).get();
  }

  // Future<DocumentSnapshot> getProfileObject(String profileID) {
  //   return collection
  //       .doc(profileID)
  //       .withConverter(
  //         fromFirestore: Profile.fromFiresore,
  //         toFirestore: (Profile perfil, _) => perfil.toFirestore(),
  //       )
  //       .get();
  // }

  // Add a Profile with autogenerated ID
  Future<DocumentReference> addProfile(Profile profile) {
    return collection.add(profile.toFirestore());
  }

  Future<void> addProfileID(Profile profile) {
    return collection.doc(profile.id).set(profile.toFirestore());
  }

  // Add a Profile with a given ID
  void updateProfile(Profile profile) async {
    await collection.doc(profile.id).update(profile.toFirestore());
  }

  // Delete the profile
  void deleteProfile(Profile profile) async {
    await collection.doc(profile.id).delete();
  }

  //GET DefaultProfile of the user
  Future<DocumentSnapshot> getDefaultProfile(String identification) {
    return collection.doc(identification).get();
  }

  //CRUD Medication

  //CREATE => ADD TO THE LIST
  Future<void> addMedicine(Profile profile, Map<String, dynamic> drug) async {
    await collection.doc(profile.id).update({
      "medicationList": FieldValue.arrayUnion([drug]),
    });
  }

  //REMOVE
  Future<void> removeMedicine(
      Profile profile, Map<String, dynamic> drug) async {
    await collection.doc(profile.id).update({
      "medicationList": FieldValue.arrayRemove([drug]),
    });
  }

  //UPDATE => REMOVE AND ADD TO THE LIST
  Future<void> updateMedicine(Profile profile, Map<String, dynamic> oldrug,
      Map<String, dynamic> newdrug) async {
    await collection.doc(profile.id).update({
      "medicationList": FieldValue.arrayRemove([oldrug]),
    });
    await addMedicine(profile, newdrug);
  }
}
